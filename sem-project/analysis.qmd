---
title: "Reproducing Montano-Centellas et al. (2020)"
author: Karthik Thrikkadeeri
toc: true
number-sections: false
embed-resources: true
bibliography: ../PhD.json
theme: sandstone
format: html
execute:
  warning: false
editor_options: 
  chunk_output_type: console
---

```{r}
library(dplyr)
library(readxl) # file is .xlsx
library(glue)
library(ggplot2); theme_set(theme_classic())
library(purrr)
library(broom) # to easily access p-value from model objects

# colour palette to match that used in paper
scale_col_pal <- scale_color_brewer(palette = "Dark2", na.value = "grey50")
scale_fill_pal <- scale_fill_brewer(palette = "Dark2", na.value = "grey50")

data_dryad <- read_xlsx("data/montano_dryad_data.xlsx",
                        sheet = "FDPD_Supporting")

# load functions for classification
source("sem-project/class_functions.R")
```

[Appendix S2](https://onlinelibrary.wiley.com/action/downloadSupplement?doi=10.1111%2Fgeb.13021&file=geb13021-sup-0001-Supinfo.pdf) available online.

## What are the diversity patterns? (Quadratic regressions)

### Fitting the models

The polynomial model is fit to each mountain separately, so need to iterate. We also need to predict responses across the elevations.

```{r}

# iterate over each mountain in the dataset:
# fit LM of each metric against linear and second-order polynomial terms of Elevation
# extract intercept and coefficients for both Elevation terms
# aggregate all these values over all mountains

list_mount <- unique(data_dryad$Mountain)
metric_cols <- c("FRic", "FDis", "PD", "MPD")
to_iter <- expand.grid(mountain = list_mount, metric = metric_cols)

quad_reg <- map2(to_iter$mountain, to_iter$metric, ~ {
  
  data_mount <- data_dryad %>% filter(Mountain == .x)
  model_formula <- as.formula(glue("{.y} ~ elevation + I(elevation^2)"))
  model_mount <- lm(model_formula, data_mount)
  
  # predict only for elevations present in each mountain
  to_pred <- data_mount %>% distinct(Mountain, elevation)
  # predict
  model_pred <- predict(model_mount, newdata = to_pred, type = "response")
  pred <- bind_cols(to_pred, pred = model_pred)
  
  # store p-value of model fit
  p <- broom::glance(model_mount) %>% pull(p.value)

  t(model_mount$coefficients) %>% 
    as_tibble() %>% 
    magrittr::set_colnames(c("intercept", "coef_linear", "coef_poly")) %>% 
    bind_cols(tibble(mountain = .x, metric = .y, pval = p)) %>% 
    left_join(pred, by = c("mountain" = "Mountain"))
  
}) %>% 
  list_rbind() %>% 
  relocate(metric, mountain) # bring metric and mountain cols to the start

```

### Plotting predicted elevational patterns

Once we have the predictions, we need to plot them and inspect the patterns.

```{r}
#| fig-asp: 1.5

quad_reg %>% 
  ggplot(aes(x = elevation, y = pred, col = mountain)) +
  geom_line() +
  facet_wrap(~ metric, ncol = 1, scales = "free_y", strip.position = "left") + 
  labs(x = "Elevation", y = "") +
  # scale_col_pal + # only makes sense to colour scheme after classifying into 8 categs
  theme(panel.grid.major.x = element_line(colour = "grey", linetype = "dotted"),
        # match strip format in paper
        strip.background = element_rect(colour = NA),
        strip.placement = "outside",
        strip.text = element_text(size = 10),
        # remove colour key
        legend.position = "none") 

```

### Classifying elevational patterns

Next, need to classify the predicted elevational pattern for each mountain into one of eight categories: Increasing, Decreasing, Mid Peak, Mid Valley, Low Plateau (Peak), High Plateau (Peak), Low Valley, High Valley (and NS for non-significant). 

```{r}
#| fig-asp: 1.5

# classify elevational trends

quad_reg_class <- quad_reg %>% 
  get_inflection() %>% 
  get_elev_cats() %>% 
  class_valley_peak() %>% 
  group_by(metric, mountain) %>% 
  reframe(trend = case_when(
    min(pval) > 0.1 ~ "NS",
    
    all(inflection == FALSE) & all(pred_diff >= 0) ~ "Increasing",
    all(inflection == FALSE) & all(pred_diff <= 0) ~ "Decreasing",
    
    all(valleypeak == "valley") & all(!(inflection == TRUE & elev_cat != "LOW")) ~ "Low Valley",
    all(valleypeak == "valley") & all(!(inflection == TRUE & elev_cat != "HIGH")) ~ "High Valley",
    all(valleypeak == "valley") & all(!(inflection == TRUE & elev_cat != "MID")) ~ "Mid Valley",
    
    all(valleypeak == "peak") & all(!(inflection == TRUE & elev_cat != "LOW")) ~ "Low Peak",
    all(valleypeak == "peak") & all(!(inflection == TRUE & elev_cat != "HIGH")) ~ "High Peak",
    all(valleypeak == "peak") & all(!(inflection == TRUE & elev_cat != "MID")) ~ "Mid Peak",
    
    TRUE ~ NA
  )) 

# plot frequency bar graph of different trend types
quad_reg_class %>% 
  mutate(trend = factor(trend, 
                         levels = c("Increasing", "Decreasing", "Mid Peak", "Mid Valley",
                                    "Low Peak", "Low Valley", "High Peak", "High Valley", "NS"))) %>% 
  group_by(metric) %>% 
  count(trend) %>% 
  ggplot() +
  geom_col(aes(x = trend, y = n, fill = trend)) +
  facet_wrap(~ metric, ncol = 1) +
  scale_fill_pal +
  theme(legend.position = "none")

```
